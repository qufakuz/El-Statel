# -*- coding: utf-8 -*-
"""bab2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uRzBDOZvpmZxnvx8p-5a583AqJcRTeeB
"""

from itertools import product

def studi_kasus_keripik():
    print("=== Studi Kasus Kombinasi Eksperimen Keripik Kentang ===")
    print("Tekan Enter untuk menggunakan nilai default (suhu: 3, waktu: 4, minyak: 3)\n")

    try:
        jumlah_suhu = int(input("Masukkan jumlah variasi suhu memasak [default 3]: ") or 3)
        jumlah_waktu = int(input("Masukkan jumlah variasi waktu memasak [default 4]: ") or 4)
        jumlah_minyak = int(input("Masukkan jumlah jenis minyak goreng [default 3]: ") or 3)
    except ValueError:
        print("‚ö†Ô∏è Input harus berupa angka bulat.")
        return

    if jumlah_suhu <= 0 or jumlah_waktu <= 0 or jumlah_minyak <= 0:
        print("‚ö†Ô∏è Semua nilai harus lebih dari 0.")
        return

    # Buat daftar label untuk suhu, waktu, dan minyak
    suhu_list = [f"Suhu-{i+1}" for i in range(jumlah_suhu)]
    waktu_list = [f"Waktu-{i+1}" for i in range(jumlah_waktu)]
    minyak_list = [f"Minyak-{i+1}" for i in range(jumlah_minyak)]

    # Menggunakan product dari itertools untuk membuat kombinasi
    kombinasi = list(product(suhu_list, waktu_list, minyak_list))

    # Output hasil
    print(f"\nüî¢ Total kombinasi eksperimen yang diteliti: {len(kombinasi)}")
    print(f"üì¶ Jumlah kombinasi untuk setiap jenis minyak: {jumlah_suhu * jumlah_waktu}")

    tampilkan = input("Tampilkan semua kombinasi eksperimen? (y/n): ").lower()
    if tampilkan == 'y':
        print("\nüìã Daftar Kombinasi Eksperimen:")
        for idx, (suhu, waktu, minyak) in enumerate(kombinasi, start=1):
            print(f"{idx:>2}. {suhu}, {waktu}, {minyak}")

    print("\nüìå Catatan: Permutasi tidak diperlukan karena urutan faktor tidak mempengaruhi hasil eksperimen.")

# Menjalankan program
if __name__ == "__main__":
    studi_kasus_keripik()

def hitung_probabilitas_faulty(hotels):
    # Menghitung probabilitas total (a)
    p_faulty = sum(hotel['probability'] * hotel['faulty'] for hotel in hotels)

    # Menghitung probabilitas Bayes untuk Lakeview (b)
    p_lakeview_given_faulty = None
    for hotel in hotels:
        if 'lakeview' in hotel['name'].lower():  # Lebih fleksibel dengan pengecekan nama
            p_lakeview_given_faulty = (hotel['faulty'] * hotel['probability']) / p_faulty
            break

    return p_faulty, p_lakeview_given_faulty

def input_data():
    hotels = []

    try:
        n = int(input("Masukkan jumlah hotel: "))
        for i in range(n):
            print(f"\nData untuk hotel ke-{i+1}:")
            name = input("  Nama hotel: ")
            p_hotel = float(input("  Peluang klien ditugaskan ke hotel ini (contoh 0.2): "))
            p_faulty = float(input("  Peluang plumbing rusak di hotel ini (contoh 0.05): "))
            hotels.append({
                'name': name,
                'probability': p_hotel,
                'faulty': p_faulty
            })
    except ValueError:
        print("Input tidak valid. Gunakan format angka desimal seperti 0.2.")
        exit()

    return hotels

def main():
    print("=== Program Perhitungan Peluang Plumbing Rusak ===")
    hotels = input_data()
    p_faulty, p_lakeview_given_faulty = hitung_probabilitas_faulty(hotels)

    print("\n=== Hasil Perhitungan ===")
    print(f"(a) Peluang klien mendapat kamar dengan plumbing rusak: {p_faulty:.4f} atau {p_faulty*100:.2f}%")

    if p_lakeview_given_faulty is not None:
        print(f"(b) Jika plumbing rusak, peluang kamar dari Lakeview: {p_lakeview_given_faulty:.4f} atau {p_lakeview_given_faulty*100:.2f}%")
    else:
        print("(b) Data hotel Lakeview tidak ditemukan, tidak bisa menghitung peluang Bayes.")

if __name__ == "__main__":
    main()

import itertools

def buat_sample_space():
    # Semua kombinasi F dan N untuk 3 sungai
    kondisi = ['F', 'N']
    sample_space = [''.join(x) for x in itertools.product(kondisi, repeat=3)]
    return sample_space

def event_minimal_dua_aman(sample_space):
    # Ambil elemen dengan jumlah F ‚â• 2
    return [s for s in sample_space if s.count('F') >= 2]

def event_khusus(sample_space, target_event):
    # Filter elemen yang cocok dengan daftar target_event
    return [s for s in sample_space if s in target_event]

def main():
    print("=== Analisis Sungai Aman atau Tidak Aman untuk Memancing ===")

    # (a) Buat dan tampilkan sample space
    S = buat_sample_space()
    print("\n(a) Sample Space (S):")
    print(S)

    # (b) Event E: minimal dua sungai aman
    E = event_minimal_dua_aman(S)
    print("\n(b) Event E (minimal dua sungai aman):")
    print(E)

    # (c) Event khusus berdasarkan input pengguna
    print("\n(c) Masukkan event khusus (contoh: FFF,NFF,FFN,NFN):")
    user_input = input("   Masukkan kombinasi dipisahkan koma: ")
    target = [e.strip().upper() for e in user_input.split(',')]
    event_custom = event_khusus(S, target)

    print("\n    Event berdasarkan input:")
    print(event_custom)

if __name__ == "__main__":
    main()